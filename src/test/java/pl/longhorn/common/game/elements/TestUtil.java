package pl.longhorn.common.game.elements;

import pl.longhorn.common.game.elements.map.MapData;
import pl.longhorn.common.game.elements.map.SpecialMapBehaviour;
import pl.longhorn.common.game.elements.map.Way;
import org.apache.commons.io.FileUtils;
import pl.longhorn.common.game.elements.position.Position;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class TestUtil {
    public static void createResult(MapData mapData, Way way) throws IOException {
        if(way == null){
            way = new Way(List.of());
        }
        createResult(mapData, List.of(way), List.of("blue"));
    }

    public static void createResult(MapData mapData, List<Way> ways, List<String> colors) throws IOException {
        File htmlTemplateFile = new File("src/test/resources/template.html");
        String htmlString = FileUtils.readFileToString(htmlTemplateFile, StandardCharsets.UTF_8);
        String title = "New Page";
        StringBuilder tableBuilder = new StringBuilder();
        for (int y = 0; y < mapData.getHeight(); y++) {
            tableBuilder.append("  <tr>");
            for (int x = 0; x < mapData.getWidth(); x++) {
                String color = getColor(new Position(x, y), mapData, ways, colors);
                tableBuilder.append("<th style=\"background-color: ").append(color).append(";\">").append(x).append(",").append(y).append("</th>");
            }
            tableBuilder.append("  </tr>");
        }
        htmlString = htmlString.replace("$title", title);
        htmlString = htmlString.replace("$body", tableBuilder.toString());
        File newHtmlFile = new File("build/result.html");
        FileUtils.writeStringToFile(newHtmlFile, htmlString, StandardCharsets.UTF_8);
    }

    private static String getColor(Position position, MapData mapData, List<Way> ways, List<String> colors) {
        Optional<SpecialMapBehaviour> specialMapBehaviour = mapData.getSpecialBehaviourPositions().find(position);
        if (specialMapBehaviour.isPresent()) {
            return specialMapBehaviour.get().getPrice() == null ? "coral" : "#AF2F00";
        } else {
            return getWayColor(position, ways, colors);
        }
    }

    private static String getWayColor(Position position, List<Way> ways, List<String> colors) {
        for (int i = 0; i < ways.size(); i++) {
            if (positionContainsIn(position, ways.get(i))) {
                return colors.get(i);
            }
        }
        return "white";
    }

    private static boolean positionContainsIn(Position position, Way way) {
        return way != null && way.getSteps().contains(position);
    }

    public static MapData createMapData(Position start, Position target) {
        Map<Position, SpecialMapBehaviour> specialMapBehaviours = new HashMap<>();
        specialMapBehaviours.put(new Position(34, 24), SpecialMapBehaviour.price(500000));
        return new MapData(start, target, 64, 96, 1, SpecialBehaviourPositionsFactory.createCollisionAsNoMove(";1063;1074;1318;1320;1321;1322;1323;1329;1331;1337;1339;1550;1551;1552;1574;1580;1583;1584;1585;1587;1588;1589;1590;1591;1592;1594;1596;1805;1806;1808;1830;1835;1838;1841;1843;1852;2061;2064;2086;2091;2094;2097;2099;2109;2317;2319;2323;2324;2325;2326;2342;2347;2348;2349;2350;2353;2355;2366;2367;2573;2575;2578;2582;2598;2609;2611;2829;2831;2832;2833;2834;2838;2854;2857;2858;2859;2860;2861;2862;2865;2867;2868;2869;2870;2871;2872;2873;2874;2875;2876;2877;2878;3085;3094;3110;3112;3119;3121;3123;3134;3341;3343;3344;3345;3346;3347;3348;3349;3366;3368;3375;3377;3379;3390;3597;3599;3617;3618;3619;3620;3621;3622;3624;3631;3633;3635;3646;3853;3855;3872;3880;3887;3889;3891;3902;4109;4111;4128;4136;4143;4145;4147;4158;4354;4355;4356;4357;4358;4359;4360;4361;4362;4365;4367;4384;4392;4399;4401;4403;4414;4609;4619;4621;4623;4634;4635;4636;4637;4638;4639;4640;4648;4655;4657;4659;4670;4865;4875;4877;4879;4889;4904;4911;4913;4915;4916;4917;4918;4919;4925;4926;5120;5131;5133;5135;5145;5155;5156;5160;5167;5169;5171;5176;5180;5387;5389;5391;5392;5393;5394;5395;5399;5400;5401;5411;5412;5416;5423;5425;5427;5432;5433;5434;5435;5436;5632;5633;5634;5643;5645;5652;5653;5654;5667;5668;5672;5679;5681;5683;5891;5892;5899;5901;5903;5904;5905;5923;5924;5928;5935;5937;5939;6148;6155;6158;6162;6174;6175;6176;6177;6184;6191;6193;6195;6198;6199;6404;6411;6418;6430;6433;6440;6446;6447;6448;6449;6451;6453;6456;6660;6667;6674;6687;6688;6696;6702;6707;6709;6712;6719;6915;6916;6923;6930;6943;6952;6953;6954;6955;6956;6957;6958;6963;6965;6966;6967;6974;7170;7179;7186;7214;7215;7217;7219;7230;7425;7435;7442;7470;7471;7473;7475;7486;7487;7681;7691;7698;7726;7727;7729;7731;7937;7947;7955;7956;7957;7958;7959;7962;7963;7982;7983;7985;7987;8193;8203;8215;8218;8219;8241;8243;8448;8459;8471;8497;8499;8506;8507;8706;8707;8715;8727;8751;8752;8753;8755;8761;8764;8961;8964;8971;8984;8985;8986;8987;8988;8989;8990;8991;8992;8993;8999;9000;9001;9002;9003;9004;9005;9006;9007;9011;9017;9020;9217;9220;9227;9249;9255;9267;9273;9274;9275;9473;9476;9483;9505;9511;9521;9522;9523;9730;9732;9740;9761;9767;9768;9769;9770;9771;9772;9773;9774;9775;9776;9777;9779;9986;9989;9996;10017;10023;10035;10041;10042;10043;10045;10046;10242;10245;10252;10273;10279;10290;10291;10296;10300;10303;10498;10499;10500;10501;10508;10517;10518;10519;10520;10521;10522;10523;10524;10525;10526;10527;10528;10529;10535;10536;10537;10538;10539;10540;10541;10542;10543;10544;10545;10552;10555;10764;10772;10809;10810;10812;10813;10814;10815;11020;11021;11022;11023;11024;11025;11026;11027;11028;11049;11050;11051;11052;11053;11054;11055;11056;11057;11058;11059;11060;11061;11062;11066;11305;11318;11322;11323;11561;11574;11577;11580;11814;11815;11817;11830;11833;11836;12069;12072;12086;12089;12090;12091;12092;12290;12291;12325;12342;12545;12548;12549;12550;12565;12566;12581;12582;12583;12584;12598;12607;12801;12806;12807;12808;12809;12810;12811;12812;12813;12814;12815;12816;12820;12823;12841;12854;12862;13057;13072;13076;13079;13097;13098;13099;13105;13106;13107;13108;13109;13110;13113;13114;13118;13312;13328;13332;13333;13334;13335;13350;13351;13353;13356;13360;13363;13368;13371;13374;13375;13584;13612;13613;13614;13615;13616;13624;13627;13840;13880;13881;13882;13883;14096;14132;14352;14359;14360;14378;14608;14610;14614;14617;14863;14864;14870;14873;14894;14895;15118;15126;15127;15128;15129;15133;15134;15149;15151;15152;15374;15388;15391;15405;15408;15412;15413;15414;15415;15420;15421;15630;15644;15647;15661;15662;15663;15664;15668;15671;15675;15678;15679;15886;15900;15901;15902;15903;15924;15927;15931;16142;16180;16184;16186;16398;16409;16410;16435;16440;16442;16654;16657;16658;16664;16667;16685;16686;16688;16689;16690;16696;16698;16911;16912;16915;16920;16923;16940;16943;16952;16954;17171;17176;17177;17178;17179;17195;17209;17428;17450;17684;17705;17940;17961;18196;18198;18199;18217;18453;18456;18473;18712;18716;18717;18729;18965;18966;18967;18968;18971;18974;18986;19220;19227;19230;19243;19475;19483;19484;19485;19486;19500;19501;19502;19503;19519;19728;19729;19730;19734;19735;19747;19748;19749;19760;19774;19983;19986;19989;19992;20002;20005;20006;20007;20017;20025;20029;20240;20245;20248;20258;20263;20274;20275;20276;20280;20282;20285;20496;20501;20502;20503;20504;20514;20519;20533;20534;20535;20538;20541;20750;20751;20752;20767;20768;20769;20774;20795;20796;21005;21010;21011;21022;21030;21051;21052;21262;21263;21265;21268;21278;21286;21289;21290;21291;21292;21293;21296;21297;21520;21524;21534;21541;21544;21550;21551;21554;21777;21778;21779;21780;21789;21798;21800;21810;21813;21814;22032;22045;22054;22057;22058;22059;22060;22061;22062;22066;22068;22071;22289;22301;22307;22308;22309;22310;22313;22319;22323;22328;22329;22330;22545;22556;22562;22568;22569;22572;22573;22574;22579;22586;22800;22812;22817;22827;22834;22842;23055;23068;23071;23072;23078;23083;23086;23087;23088;23089;23091;23095;23096;23097;23310;23325;23326;23340;23341;23345;23347;23350;23353;23359;23563;23565;23582;23584;23585;23590;23591;23592;23597;23603;23604;23605;23606;23615;23814;23815;23816;23817;23818;23820;23821;23834;23835;23836;23837;23839;23842;23843;23845;23848;23867;23868;23870;24069;24076;24090;24100;24104;24110;24111;24112;24113;24120;24121;24324;24346;24359;24366;24370;24371;24382;24383;", specialMapBehaviours));
    }

    public static MapData createRandomMapData() {
        return createMapData(TestUtil.randomPosition(), TestUtil.randomPosition());
    }

    private static Position randomPosition() {
        Random random = new Random();
        return new Position(random.nextInt(64), random.nextInt(96));
    }
}
